// <auto-generated />
using System;
using Darks.API.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Darks.API.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDatabaseContext))]
    [Migration("20240912042801_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Darks.Core.Models.Account.Machine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DiscordBotToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GenericKeyMachineSettingsId")
                        .HasColumnType("int");

                    b.Property<int?>("GroupId")
                        .HasColumnType("int");

                    b.Property<string>("Hwid")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdleMachineSettingsId")
                        .HasColumnType("int");

                    b.Property<int>("InventoryMachineSettingsId")
                        .HasColumnType("int");

                    b.Property<int>("MovementMachineSettingsId")
                        .HasColumnType("int");

                    b.Property<int>("ProcessMachineSettingsId")
                        .HasColumnType("int");

                    b.Property<int>("TribeLogMachineSettingsId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GenericKeyMachineSettingsId");

                    b.HasIndex("GroupId");

                    b.HasIndex("IdleMachineSettingsId");

                    b.HasIndex("InventoryMachineSettingsId");

                    b.HasIndex("MovementMachineSettingsId");

                    b.HasIndex("ProcessMachineSettingsId");

                    b.HasIndex("TribeLogMachineSettingsId");

                    b.HasIndex("UserId");

                    b.ToTable("Machine");
                });

            modelBuilder.Entity("Darks.Core.Models.Account.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Darks.Core.Models.GenericKeys.GenericKeyMachineSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("UseKey")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("GenericKeyMachineSettings");
                });

            modelBuilder.Entity("Darks.Core.Models.Idle.IdleMachineSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.HasKey("Id");

                    b.ToTable("IdleMachineSettings");
                });

            modelBuilder.Entity("Darks.Core.Models.Inventory.InventoryMachineSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ToggleOtherInventoryKey")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ToggleSelfInventoryKey")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("InventoryMachineSettings");
                });

            modelBuilder.Entity("Darks.Core.Models.Jobs.Crate.CrateJob", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("GroupId")
                        .HasColumnType("int");

                    b.Property<string>("ServerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UpdateChannelId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.ToTable("CrateJob");
                });

            modelBuilder.Entity("Darks.Core.Models.Jobs.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("Darks.Core.Models.Jobs.Sap.SapJob", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BedNames")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("GroupId")
                        .HasColumnType("int");

                    b.Property<string>("ServerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UpdateChannelId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.ToTable("SapJob");
                });

            modelBuilder.Entity("Darks.Core.Models.Movement.MovementMachineSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("MoveBackwardKey")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MoveForwardKey")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MoveLeftKey")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MoveRightKey")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MovementMachineSettings");
                });

            modelBuilder.Entity("Darks.Core.Models.Process.ProcessMachineSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ShortcutUrlFilePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ProcessMachineSettings");
                });

            modelBuilder.Entity("Darks.Core.Models.TribeLog.TribeLogMachineSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ToggleTribeLogKey")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TribeLogMachineSettings");
                });

            modelBuilder.Entity("Darks.Core.Models.Account.Machine", b =>
                {
                    b.HasOne("Darks.Core.Models.GenericKeys.GenericKeyMachineSettings", "GenericKeyMachineSettings")
                        .WithMany()
                        .HasForeignKey("GenericKeyMachineSettingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Darks.Core.Models.Jobs.Group", null)
                        .WithMany("Machines")
                        .HasForeignKey("GroupId");

                    b.HasOne("Darks.Core.Models.Idle.IdleMachineSettings", "IdleMachineSettings")
                        .WithMany()
                        .HasForeignKey("IdleMachineSettingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Darks.Core.Models.Inventory.InventoryMachineSettings", "InventoryMachineSettings")
                        .WithMany()
                        .HasForeignKey("InventoryMachineSettingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Darks.Core.Models.Movement.MovementMachineSettings", "MovementMachineSettings")
                        .WithMany()
                        .HasForeignKey("MovementMachineSettingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Darks.Core.Models.Process.ProcessMachineSettings", "ProcessMachineSettings")
                        .WithMany()
                        .HasForeignKey("ProcessMachineSettingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Darks.Core.Models.TribeLog.TribeLogMachineSettings", "TribeLogMachineSettings")
                        .WithMany()
                        .HasForeignKey("TribeLogMachineSettingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Darks.Core.Models.Account.User", null)
                        .WithMany("Machines")
                        .HasForeignKey("UserId");

                    b.Navigation("GenericKeyMachineSettings");

                    b.Navigation("IdleMachineSettings");

                    b.Navigation("InventoryMachineSettings");

                    b.Navigation("MovementMachineSettings");

                    b.Navigation("ProcessMachineSettings");

                    b.Navigation("TribeLogMachineSettings");
                });

            modelBuilder.Entity("Darks.Core.Models.Jobs.Crate.CrateJob", b =>
                {
                    b.HasOne("Darks.Core.Models.Jobs.Group", null)
                        .WithMany("CrateJobs")
                        .HasForeignKey("GroupId");

                    b.OwnsMany("Darks.Core.Models.Jobs.Crate.Components.Crate", "Crates", b1 =>
                        {
                            b1.Property<int>("CrateJobId")
                                .HasColumnType("int");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"));

                            b1.Property<string>("BedName")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<bool>("Enabled")
                                .HasColumnType("bit");

                            b1.Property<bool>("IsDoubleHarvestable")
                                .HasColumnType("bit");

                            b1.Property<int>("LoadDelay")
                                .HasColumnType("int");

                            b1.Property<bool>("WaitUntilDeath")
                                .HasColumnType("bit");

                            b1.HasKey("CrateJobId", "Id");

                            b1.ToTable("Crate");

                            b1.WithOwner()
                                .HasForeignKey("CrateJobId");

                            b1.OwnsOne("Darks.Core.Models.Jobs.Components.HowToGetInventoryInfo", "GetCrateInventoryInfo", b2 =>
                                {
                                    b2.Property<int>("CrateJobId")
                                        .HasColumnType("int");

                                    b2.Property<int>("CrateId")
                                        .HasColumnType("int");

                                    b2.Property<int>("Direction")
                                        .HasColumnType("int");

                                    b2.Property<int>("InitialPivotDuration")
                                        .HasColumnType("int");

                                    b2.Property<int>("MaxPivotStepCount")
                                        .HasColumnType("int");

                                    b2.Property<int>("PivotDuration")
                                        .HasColumnType("int");

                                    b2.HasKey("CrateJobId", "CrateId");

                                    b2.ToTable("Crate");

                                    b2.WithOwner()
                                        .HasForeignKey("CrateJobId", "CrateId");
                                });

                            b1.OwnsOne("Darks.Core.Models.Jobs.Components.HowToGetInventoryInfo", "GetDepositInventoryInfo", b2 =>
                                {
                                    b2.Property<int>("CrateJobId")
                                        .HasColumnType("int");

                                    b2.Property<int>("CrateId")
                                        .HasColumnType("int");

                                    b2.Property<int>("Direction")
                                        .HasColumnType("int");

                                    b2.Property<int>("InitialPivotDuration")
                                        .HasColumnType("int");

                                    b2.Property<int>("MaxPivotStepCount")
                                        .HasColumnType("int");

                                    b2.Property<int>("PivotDuration")
                                        .HasColumnType("int");

                                    b2.HasKey("CrateJobId", "CrateId");

                                    b2.ToTable("Crate");

                                    b2.WithOwner()
                                        .HasForeignKey("CrateJobId", "CrateId");
                                });

                            b1.Navigation("GetCrateInventoryInfo")
                                .IsRequired();

                            b1.Navigation("GetDepositInventoryInfo")
                                .IsRequired();
                        });

                    b.OwnsOne("Darks.Core.Models.Rect", "CrateScreenshotRect", b1 =>
                        {
                            b1.Property<int>("CrateJobId")
                                .HasColumnType("int");

                            b1.HasKey("CrateJobId");

                            b1.ToTable("CrateJob");

                            b1.WithOwner()
                                .HasForeignKey("CrateJobId");
                        });

                    b.Navigation("CrateScreenshotRect")
                        .IsRequired();

                    b.Navigation("Crates");
                });

            modelBuilder.Entity("Darks.Core.Models.Jobs.Sap.SapJob", b =>
                {
                    b.HasOne("Darks.Core.Models.Jobs.Group", null)
                        .WithMany("SapJobs")
                        .HasForeignKey("GroupId");
                });

            modelBuilder.Entity("Darks.Core.Models.Account.User", b =>
                {
                    b.Navigation("Machines");
                });

            modelBuilder.Entity("Darks.Core.Models.Jobs.Group", b =>
                {
                    b.Navigation("CrateJobs");

                    b.Navigation("Machines");

                    b.Navigation("SapJobs");
                });
#pragma warning restore 612, 618
        }
    }
}
