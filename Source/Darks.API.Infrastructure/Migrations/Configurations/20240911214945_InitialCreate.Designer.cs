// <auto-generated />
using Darks.API.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Darks.API.Infrastructure.Migrations.Configurations
{
    [DbContext(typeof(ConfigDatabaseContext))]
    [Migration("20240911214945_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Darks.Core.Models.Color", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Blue")
                        .HasColumnType("int");

                    b.Property<int>("Green")
                        .HasColumnType("int");

                    b.Property<int>("Red")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Color");
                });

            modelBuilder.Entity("Darks.Core.Models.Inventory.InventoryScreenConfig", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.HasKey("Id");

                    b.ToTable("InventoryScreenConfigs");
                });

            modelBuilder.Entity("Darks.Core.Models.MainMenu.MainMenuScreenConfig", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.HasKey("Id");

                    b.ToTable("MainMenuScreenConfigs");
                });

            modelBuilder.Entity("Darks.Core.Models.ParasaurAlarm.ParasaurAlarmScreenConfig", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AlarmColorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AlarmColorId");

                    b.ToTable("ParasaurAlarmScreenConfigs");
                });

            modelBuilder.Entity("Darks.Core.Models.Resolution", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Height")
                        .HasColumnType("int");

                    b.Property<int>("Width")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Resolutions");
                });

            modelBuilder.Entity("Darks.Core.Models.Respawn.RespawnScreenConfig", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.HasKey("Id");

                    b.ToTable("RespawnScreenConfigs");
                });

            modelBuilder.Entity("Darks.Core.Models.TribeLog.TribeLogScreenConfig", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.HasKey("Id");

                    b.ToTable("TribeLogScreenConfigs");
                });

            modelBuilder.Entity("Darks.Core.Models.Inventory.InventoryScreenConfig", b =>
                {
                    b.OwnsOne("Darks.Core.Models.Pixel", "IsOtherInventroyOpenPixel", b1 =>
                        {
                            b1.Property<int>("InventoryScreenConfigId")
                                .HasColumnType("int");

                            b1.Property<int>("ColorId")
                                .HasColumnType("int");

                            b1.HasKey("InventoryScreenConfigId");

                            b1.HasIndex("ColorId");

                            b1.ToTable("InventoryScreenConfigs");

                            b1.HasOne("Darks.Core.Models.Color", "Color")
                                .WithMany()
                                .HasForeignKey("ColorId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.WithOwner()
                                .HasForeignKey("InventoryScreenConfigId");

                            b1.OwnsOne("Darks.Core.Models.Point", "Position", b2 =>
                                {
                                    b2.Property<int>("PixelInventoryScreenConfigId")
                                        .HasColumnType("int");

                                    b2.HasKey("PixelInventoryScreenConfigId");

                                    b2.ToTable("InventoryScreenConfigs");

                                    b2.WithOwner()
                                        .HasForeignKey("PixelInventoryScreenConfigId");
                                });

                            b1.Navigation("Color");

                            b1.Navigation("Position")
                                .IsRequired();
                        });

                    b.OwnsOne("Darks.Core.Models.Pixel", "IsSelfInventroyOpenPixel", b1 =>
                        {
                            b1.Property<int>("InventoryScreenConfigId")
                                .HasColumnType("int");

                            b1.Property<int>("ColorId")
                                .HasColumnType("int");

                            b1.HasKey("InventoryScreenConfigId");

                            b1.HasIndex("ColorId");

                            b1.ToTable("InventoryScreenConfigs");

                            b1.HasOne("Darks.Core.Models.Color", "Color")
                                .WithMany()
                                .HasForeignKey("ColorId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.WithOwner()
                                .HasForeignKey("InventoryScreenConfigId");

                            b1.OwnsOne("Darks.Core.Models.Point", "Position", b2 =>
                                {
                                    b2.Property<int>("PixelInventoryScreenConfigId")
                                        .HasColumnType("int");

                                    b2.HasKey("PixelInventoryScreenConfigId");

                                    b2.ToTable("InventoryScreenConfigs");

                                    b2.WithOwner()
                                        .HasForeignKey("PixelInventoryScreenConfigId");
                                });

                            b1.Navigation("Color");

                            b1.Navigation("Position")
                                .IsRequired();
                        });

                    b.OwnsOne("Darks.Core.Models.Point", "OtherFirstSlotPos", b1 =>
                        {
                            b1.Property<int>("InventoryScreenConfigId")
                                .HasColumnType("int");

                            b1.HasKey("InventoryScreenConfigId");

                            b1.ToTable("InventoryScreenConfigs");

                            b1.WithOwner()
                                .HasForeignKey("InventoryScreenConfigId");
                        });

                    b.OwnsOne("Darks.Core.Models.Point", "OtherToSelfTransferBtnPos", b1 =>
                        {
                            b1.Property<int>("InventoryScreenConfigId")
                                .HasColumnType("int");

                            b1.HasKey("InventoryScreenConfigId");

                            b1.ToTable("InventoryScreenConfigs");

                            b1.WithOwner()
                                .HasForeignKey("InventoryScreenConfigId");
                        });

                    b.OwnsOne("Darks.Core.Models.Point", "SelfFirstSlotPos", b1 =>
                        {
                            b1.Property<int>("InventoryScreenConfigId")
                                .HasColumnType("int");

                            b1.HasKey("InventoryScreenConfigId");

                            b1.ToTable("InventoryScreenConfigs");

                            b1.WithOwner()
                                .HasForeignKey("InventoryScreenConfigId");
                        });

                    b.OwnsOne("Darks.Core.Models.Point", "SelfToOtherTransferBtnPos", b1 =>
                        {
                            b1.Property<int>("InventoryScreenConfigId")
                                .HasColumnType("int");

                            b1.HasKey("InventoryScreenConfigId");

                            b1.ToTable("InventoryScreenConfigs");

                            b1.WithOwner()
                                .HasForeignKey("InventoryScreenConfigId");
                        });

                    b.Navigation("IsOtherInventroyOpenPixel")
                        .IsRequired();

                    b.Navigation("IsSelfInventroyOpenPixel")
                        .IsRequired();

                    b.Navigation("OtherFirstSlotPos")
                        .IsRequired();

                    b.Navigation("OtherToSelfTransferBtnPos")
                        .IsRequired();

                    b.Navigation("SelfFirstSlotPos")
                        .IsRequired();

                    b.Navigation("SelfToOtherTransferBtnPos")
                        .IsRequired();
                });

            modelBuilder.Entity("Darks.Core.Models.MainMenu.MainMenuScreenConfig", b =>
                {
                    b.OwnsOne("Darks.Core.Models.Point", "IndexPageJoinBtnPos", b1 =>
                        {
                            b1.Property<int>("MainMenuScreenConfigId")
                                .HasColumnType("int");

                            b1.HasKey("MainMenuScreenConfigId");

                            b1.ToTable("MainMenuScreenConfigs");

                            b1.WithOwner()
                                .HasForeignKey("MainMenuScreenConfigId");
                        });

                    b.OwnsOne("Darks.Core.Models.Point", "JoinLastSessionBtnPos", b1 =>
                        {
                            b1.Property<int>("MainMenuScreenConfigId")
                                .HasColumnType("int");

                            b1.HasKey("MainMenuScreenConfigId");

                            b1.ToTable("MainMenuScreenConfigs");

                            b1.WithOwner()
                                .HasForeignKey("MainMenuScreenConfigId");
                        });

                    b.OwnsOne("Darks.Core.Models.Point", "JoinServerBtnPos", b1 =>
                        {
                            b1.Property<int>("MainMenuScreenConfigId")
                                .HasColumnType("int");

                            b1.HasKey("MainMenuScreenConfigId");

                            b1.ToTable("MainMenuScreenConfigs");

                            b1.WithOwner()
                                .HasForeignKey("MainMenuScreenConfigId");
                        });

                    b.OwnsOne("Darks.Core.Models.Point", "MultiplayerOptionDialogPos", b1 =>
                        {
                            b1.Property<int>("MainMenuScreenConfigId")
                                .HasColumnType("int");

                            b1.HasKey("MainMenuScreenConfigId");

                            b1.ToTable("MainMenuScreenConfigs");

                            b1.WithOwner()
                                .HasForeignKey("MainMenuScreenConfigId");
                        });

                    b.OwnsOne("Darks.Core.Models.Point", "ServerSearchbarPos", b1 =>
                        {
                            b1.Property<int>("MainMenuScreenConfigId")
                                .HasColumnType("int");

                            b1.HasKey("MainMenuScreenConfigId");

                            b1.ToTable("MainMenuScreenConfigs");

                            b1.WithOwner()
                                .HasForeignKey("MainMenuScreenConfigId");
                        });

                    b.Navigation("IndexPageJoinBtnPos")
                        .IsRequired();

                    b.Navigation("JoinLastSessionBtnPos")
                        .IsRequired();

                    b.Navigation("JoinServerBtnPos")
                        .IsRequired();

                    b.Navigation("MultiplayerOptionDialogPos")
                        .IsRequired();

                    b.Navigation("ServerSearchbarPos")
                        .IsRequired();
                });

            modelBuilder.Entity("Darks.Core.Models.ParasaurAlarm.ParasaurAlarmScreenConfig", b =>
                {
                    b.HasOne("Darks.Core.Models.Color", "AlarmColor")
                        .WithMany()
                        .HasForeignKey("AlarmColorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Darks.Core.Models.Rect", "AlarmScreenshotRect", b1 =>
                        {
                            b1.Property<int>("ParasaurAlarmScreenConfigId")
                                .HasColumnType("int");

                            b1.HasKey("ParasaurAlarmScreenConfigId");

                            b1.ToTable("ParasaurAlarmScreenConfigs");

                            b1.WithOwner()
                                .HasForeignKey("ParasaurAlarmScreenConfigId");
                        });

                    b.Navigation("AlarmColor");

                    b.Navigation("AlarmScreenshotRect")
                        .IsRequired();
                });

            modelBuilder.Entity("Darks.Core.Models.Respawn.RespawnScreenConfig", b =>
                {
                    b.OwnsOne("Darks.Core.Models.Point", "DeathScreenSearchbarPos", b1 =>
                        {
                            b1.Property<int>("RespawnScreenConfigId")
                                .HasColumnType("int");

                            b1.HasKey("RespawnScreenConfigId");

                            b1.ToTable("RespawnScreenConfigs");

                            b1.WithOwner()
                                .HasForeignKey("RespawnScreenConfigId");
                        });

                    b.OwnsOne("Darks.Core.Models.Point", "FastTravelScreenSearchbarPos", b1 =>
                        {
                            b1.Property<int>("RespawnScreenConfigId")
                                .HasColumnType("int");

                            b1.HasKey("RespawnScreenConfigId");

                            b1.ToTable("RespawnScreenConfigs");

                            b1.WithOwner()
                                .HasForeignKey("RespawnScreenConfigId");
                        });

                    b.OwnsOne("Darks.Core.Models.Pixel", "IsDeathScreenOpenPixel", b1 =>
                        {
                            b1.Property<int>("RespawnScreenConfigId")
                                .HasColumnType("int");

                            b1.Property<int>("ColorId")
                                .HasColumnType("int");

                            b1.HasKey("RespawnScreenConfigId");

                            b1.HasIndex("ColorId");

                            b1.ToTable("RespawnScreenConfigs");

                            b1.HasOne("Darks.Core.Models.Color", "Color")
                                .WithMany()
                                .HasForeignKey("ColorId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.WithOwner()
                                .HasForeignKey("RespawnScreenConfigId");

                            b1.OwnsOne("Darks.Core.Models.Point", "Position", b2 =>
                                {
                                    b2.Property<int>("PixelRespawnScreenConfigId")
                                        .HasColumnType("int");

                                    b2.HasKey("PixelRespawnScreenConfigId");

                                    b2.ToTable("RespawnScreenConfigs");

                                    b2.WithOwner()
                                        .HasForeignKey("PixelRespawnScreenConfigId");
                                });

                            b1.Navigation("Color");

                            b1.Navigation("Position")
                                .IsRequired();
                        });

                    b.OwnsOne("Darks.Core.Models.Pixel", "IsFastTravelScreenOpenPixel", b1 =>
                        {
                            b1.Property<int>("RespawnScreenConfigId")
                                .HasColumnType("int");

                            b1.Property<int>("ColorId")
                                .HasColumnType("int");

                            b1.HasKey("RespawnScreenConfigId");

                            b1.HasIndex("ColorId");

                            b1.ToTable("RespawnScreenConfigs");

                            b1.HasOne("Darks.Core.Models.Color", "Color")
                                .WithMany()
                                .HasForeignKey("ColorId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.WithOwner()
                                .HasForeignKey("RespawnScreenConfigId");

                            b1.OwnsOne("Darks.Core.Models.Point", "Position", b2 =>
                                {
                                    b2.Property<int>("PixelRespawnScreenConfigId")
                                        .HasColumnType("int");

                                    b2.HasKey("PixelRespawnScreenConfigId");

                                    b2.ToTable("RespawnScreenConfigs");

                                    b2.WithOwner()
                                        .HasForeignKey("PixelRespawnScreenConfigId");
                                });

                            b1.Navigation("Color");

                            b1.Navigation("Position")
                                .IsRequired();
                        });

                    b.OwnsOne("Darks.Core.Models.Pixel", "SelectBedPixel", b1 =>
                        {
                            b1.Property<int>("RespawnScreenConfigId")
                                .HasColumnType("int");

                            b1.Property<int>("ColorId")
                                .HasColumnType("int");

                            b1.HasKey("RespawnScreenConfigId");

                            b1.HasIndex("ColorId");

                            b1.ToTable("RespawnScreenConfigs");

                            b1.HasOne("Darks.Core.Models.Color", "Color")
                                .WithMany()
                                .HasForeignKey("ColorId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.WithOwner()
                                .HasForeignKey("RespawnScreenConfigId");

                            b1.OwnsOne("Darks.Core.Models.Point", "Position", b2 =>
                                {
                                    b2.Property<int>("PixelRespawnScreenConfigId")
                                        .HasColumnType("int");

                                    b2.HasKey("PixelRespawnScreenConfigId");

                                    b2.ToTable("RespawnScreenConfigs");

                                    b2.WithOwner()
                                        .HasForeignKey("PixelRespawnScreenConfigId");
                                });

                            b1.Navigation("Color");

                            b1.Navigation("Position")
                                .IsRequired();
                        });

                    b.OwnsOne("Darks.Core.Models.Point", "SpawnBtnPos", b1 =>
                        {
                            b1.Property<int>("RespawnScreenConfigId")
                                .HasColumnType("int");

                            b1.HasKey("RespawnScreenConfigId");

                            b1.ToTable("RespawnScreenConfigs");

                            b1.WithOwner()
                                .HasForeignKey("RespawnScreenConfigId");
                        });

                    b.Navigation("DeathScreenSearchbarPos")
                        .IsRequired();

                    b.Navigation("FastTravelScreenSearchbarPos")
                        .IsRequired();

                    b.Navigation("IsDeathScreenOpenPixel")
                        .IsRequired();

                    b.Navigation("IsFastTravelScreenOpenPixel")
                        .IsRequired();

                    b.Navigation("SelectBedPixel")
                        .IsRequired();

                    b.Navigation("SpawnBtnPos")
                        .IsRequired();
                });

            modelBuilder.Entity("Darks.Core.Models.TribeLog.TribeLogScreenConfig", b =>
                {
                    b.OwnsOne("Darks.Core.Models.Pixel", "IsTribeLogOpenPixel", b1 =>
                        {
                            b1.Property<int>("TribeLogScreenConfigId")
                                .HasColumnType("int");

                            b1.Property<int>("ColorId")
                                .HasColumnType("int");

                            b1.HasKey("TribeLogScreenConfigId");

                            b1.HasIndex("ColorId");

                            b1.ToTable("TribeLogScreenConfigs");

                            b1.HasOne("Darks.Core.Models.Color", "Color")
                                .WithMany()
                                .HasForeignKey("ColorId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.WithOwner()
                                .HasForeignKey("TribeLogScreenConfigId");

                            b1.OwnsOne("Darks.Core.Models.Point", "Position", b2 =>
                                {
                                    b2.Property<int>("PixelTribeLogScreenConfigId")
                                        .HasColumnType("int");

                                    b2.HasKey("PixelTribeLogScreenConfigId");

                                    b2.ToTable("TribeLogScreenConfigs");

                                    b2.WithOwner()
                                        .HasForeignKey("PixelTribeLogScreenConfigId");
                                });

                            b1.Navigation("Color");

                            b1.Navigation("Position")
                                .IsRequired();
                        });

                    b.OwnsOne("Darks.Core.Models.Rect", "TribeLogScreenshotRect", b1 =>
                        {
                            b1.Property<int>("TribeLogScreenConfigId")
                                .HasColumnType("int");

                            b1.HasKey("TribeLogScreenConfigId");

                            b1.ToTable("TribeLogScreenConfigs");

                            b1.WithOwner()
                                .HasForeignKey("TribeLogScreenConfigId");
                        });

                    b.Navigation("IsTribeLogOpenPixel")
                        .IsRequired();

                    b.Navigation("TribeLogScreenshotRect")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
